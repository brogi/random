import boto3
import xml.etree.ElementTree as ET
from datetime import datetime

# Initialize S3 and CloudTrail clients
s3_client = boto3.client('s3')
cloudtrail_client = boto3.client('cloudtrail')

# Function to list all S3 buckets
def get_s3_buckets():
    response = s3_client.list_buckets()
    return [bucket['Name'] for bucket in response['Buckets']]

# Function to get the last access date of an S3 bucket via CloudTrail logs
def get_bucket_last_access_date(bucket_name):
    events = cloudtrail_client.lookup_events(
        LookupAttributes=[
            {
                'AttributeKey': 'ResourceName',
                'AttributeValue': bucket_name
            },
        ],
        MaxResults=1
    )
    
    if events['Events']:
        return events['Events'][0]['EventTime'].strftime("%Y-%m-%d %H:%M:%S")
    else:
        return "No recent access"

# Function to generate the XML report from bucket data
def generate_xml_report(bucket_data):
    root = ET.Element("S3Buckets")
    for bucket_name, last_access in bucket_data.items():
        bucket_element = ET.SubElement(root, "Bucket")
        name_element = ET.SubElement(bucket_element, "Name")
        name_element.text = bucket_name
        last_access_element = ET.SubElement(bucket_element, "LastAccess")
        last_access_element.text = last_access
    return ET.tostring(root, encoding='unicode')

# Function to upload the XML report to S3
def upload_to_s3(bucket_name, xml_data):
    # Format today's date as YYYY-MM-DD
    today_date = datetime.now().strftime("%Y-%m-%d")
    file_name = f"S3-Bucket-Logs-{today_date}.xml"  # Filename format
    s3_client.put_object(
        Bucket=bucket_name,
        Key=file_name,
        Body=xml_data,
        ContentType='application/xml'
    )
    return file_name

# Main Lambda function that will be invoked
def handler(event, context):
    s3_buckets = get_s3_buckets()
    result = {bucket: get_bucket_last_access_date(bucket) for bucket in s3_buckets}
    xml_report = generate_xml_report(result)
    
    # Upload the XML report to S3
    uploaded_file_name = upload_to_s3('skynet-s3-logs', xml_report)
    
    # Return the uploaded file name for reference
    return {
        "statusCode": 200,
        "body": f"XML report uploaded successfully: {uploaded_file_name}",
        "headers": {
            "Content-Type": "application/xml"
        }
    }



{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "s3:ListAllMyBuckets"
      ],
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:PutObject"
      ],
      "Resource": "arn:aws:s3:::skynet-s3-logs/*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "cloudtrail:LookupEvents"
      ],
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
}

#!/bin/bash


# Define the base path for the certificates in Vault
VAULT_BASE_PATH="kv/certs/$cert_name"

# Assuming certificate_file is defined in another script and passed in
#echo "Certificate file path is $certificate_file"

# Prompt for the file path of the private key
read -p "Enter the file path for the new private key: " private_key_file

# Pull the certificate chain content from Vault
certificate_chain_file=$(vault kv get -field=chain "kv/certs/DHS-Treasury-G2-chain")

# Read the contents of the certificate and key files
if [[ -f "$certificate_file" ]]; then
  certificate_content=$(cat "$certificate_file")
else
  echo "Error: Public certificate file not found at $certificate_file"
  exit 1
fi

if [[ -f "$private_key_file" ]]; then
  private_key_content=$(cat "$private_key_file")
else
  echo "Error: Private key file not found at $private_key_file"
  exit 1
fi

# Check if any of the contents are empty and prompt again if they are
while [[ -z "$certificate_content" || -z "$private_key_content" || -z "$certificate_chain_file" ]]; do
  if [[ -z "$certificate_content" ]]; then
    echo "Error: Public certificate content is empty. Check the certificate file."
    exit 1
  fi
  if [[ -z "$private_key_content" ]]; then
    read -p "Private key file content is empty. Please re-enter the file path: " private_key_file
    if [[ -f "$private_key_file" ]]; then
      private_key_content=$(cat "$private_key_file")
    else
      echo "Error: Private key file not found at $private_key_file"
      exit 1
    fi
  fi
  if [[ -z "$certificate_chain_file" ]]; then
    echo "Error: Certificate chain content could not be retrieved from Vault. Please check the path or the Vault configuration."
    exit 1
  fi
done

# Write the contents to Vault
vault kv put "$VAULT_BASE_PATH" \
  cert="$certificate_content" \
  key="$private_key_content" \
  chain="$certificate_chain_file"

# Check if the operation was successful
if [ $? -eq 0 ]; then
  echo "Successfully updated the secret for $cert_name at path $VAULT_BASE_PATH."
else
  echo "Error: Failed to update the secret."
  exit 1
fi




# Extract modulus from certificate and private key
cert_modulus=$(openssl x509 -noout -modulus -in "$certificate_file" | openssl md5)
key_modulus=$(openssl rsa -noout -modulus -in "$private_key_file" | openssl md5)

# Compare moduli
if [[ "$cert_modulus" != "$key_modulus" ]]; then
  echo "Error: Modulus of certificate and private key do not match."
  exit 1
fi


# AWS CLI command to upload the server certificate
aws_command="aws iam upload-server-certificate --server-certificate-name $cert_name --certificate-body file://$certificate_file --private-key file://$private_key_file --certificate-chain file://$certificate_chain_file"

# Print the AWS CLI command
echo "The AWS CLI command that will be executed is:"
echo "$aws_command"



cn=$(openssl x509 -in "$certificatefile" -noout -subject | grep -oP '(?<=CN=).*?(?=/|$)')
